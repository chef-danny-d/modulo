// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
	provider = "sqlite"
	url      = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}

// --------------------------------------

model User {
	id             Int      @id @default(autoincrement())
	createdAt      DateTime @default(now())
	updatedAt      DateTime @updatedAt
	firstName      String?
	lastName       String?
	email          String   @unique
	hashedPassword String?
	role           String   @default("USER")
	avatar         String?  @default("https://images.unsplash.com/photo-1568602471122-7832951cc4c5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=3540&q=80")

	tokens   Token[]
	sessions Session[]
	reviews  Review[]
	courses  Course[]
}

model Session {
	id                 Int       @id @default(autoincrement())
	createdAt          DateTime  @default(now())
	updatedAt          DateTime  @updatedAt
	expiresAt          DateTime?
	handle             String    @unique
	hashedSessionToken String?
	antiCSRFToken      String?
	publicData         String?
	privateData        String?

	user   User? @relation(fields: [userId], references: [id])
	userId Int?
}

model Token {
	id          Int      @id @default(autoincrement())
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
	hashedToken String
	type        String
	// See note below about TokenType enum
	// type        TokenType
	expiresAt   DateTime
	sentTo      String

	user   User @relation(fields: [userId], references: [id])
	userId Int

	@@unique([hashedToken, type])
}

model Course {
	id        Int       @id @default(autoincrement())
	createdAt DateTime  @default(now())
	updatedAt DateTime  @updatedAt
	title     String
	slug      String    @unique
	summary   String
	image     String
	price     Int
	duration  Int
	chapters  Chapter[]
	reviews   Review[]
	author    User?     @relation(fields: [authorId], references: [id])
	authorId  Int?
}

model Chapter {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	title     String
	summary   String
	duration  Int
	position  Int      @default(0)
	course    Course   @relation(fields: [courseId], references: [id])
	courseId  Int
	lessons   Lesson[]
}

model Lesson {
	id          Int       @id @default(autoincrement())
	createdAt   DateTime  @default(now())
	updatedAt   DateTime  @updatedAt
	title       String
	summary     String
	duration    Int
	position    Int       @default(0)
	contentType String    @default("VIDEO")
	content     Content[]
	chapter     Chapter   @relation(fields: [chapterId], references: [id])
	chapterId   Int
}

model Content {
	id            Int      @id @default(autoincrement())
	createdAt     DateTime @default(now())
	updatedAt     DateTime @updatedAt
	accessURL     String
	transcriptURL String?
	captionURL    String?
	quiz          Quiz?    @relation(fields: [quizId], references: [id])
	quizId        Int?     @unique
	lesson        Lesson   @relation(fields: [lessonId], references: [id])
	lessonId      Int
}

model Quiz {
	id        Int        @id @default(autoincrement())
	createdAt DateTime   @default(now())
	updatedAt DateTime   @updatedAt
	title     String
	summary   String
	duration  Int
	position  Int        @default(0)
	questions Question[]
	content   Content?
}

model Question {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	title     String
	summary   String
	position  Int      @default(0)
	quiz      Quiz     @relation(fields: [quizId], references: [id])
	quizId    Int
	answers   Answer[]
}

model Answer {
	id         Int      @id @default(autoincrement())
	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt
	title      String
	summary    String
	position   Int      @default(0)
	question   Question @relation(fields: [questionId], references: [id])
	questionId Int
}

model Review {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	rating    Int
	comment   String
	course    Course   @relation(fields: [courseId], references: [id])
	courseId  Int
	user      User     @relation(fields: [userId], references: [id])
	userId    Int
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
